
******************LAB PROGRAMS******************
1.Write a C program to print preorder, inorder, and postorder traversal on Binary Tree.

#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};

void inorder(struct node* root){
    if(root == NULL)
    {	 
	return;
    }
    inorder(root->left);
    printf("%d ->", root->data);
    inorder(root->right);
}

void preorder(struct node* root){
    if(root == NULL)
    {	 
	return;
    }
    printf("%d ->", root->data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(struct node* root) {
    if(root == NULL)
    {	 
	return;
    }
    postorder(root->left);
    postorder(root->right);
    printf("%d ->", root->data);
}

struct node* createNode(int value)
{
    struct node* newNode = malloc(sizeof(struct node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;

    return newNode;
}
void main()
{
    struct node* root = createNode(1);
    root->left=createNode(12);
    root->right=createNode(9);
    
    root->left->left=createNode(10);
    root->left->right=createNode(15);
    
    printf("Inorder traversal \n");
    inorder(root);

    printf("\nPreorder traversal \n");
    preorder(root);

    printf("\nPostorder traversal \n");
    postorder(root);
}
2. Write a C program to create (or insert) and inorder traversal on Binary Search Tree.

#include <stdio.h>
#include <stdlib.h>
struct tree
{
    int  num;
    struct tree *left;
    struct tree *right;
};
void inorder(struct tree *root)
{  
    if (root=='\0')
    {
	return;
    }
    inorder(root->left);
    printf("%d-",(root->num));
    inorder(root->right);
}
struct tree* insert(struct tree* root,int data)
{
    if (root=='\0')
    {
        root=(struct tree*)malloc(sizeof(struct tree));
        root->left=root->right='\0';
        root->num=data;
    }
    else
    {
        if (data>root->num)
        {
            insert(root->right,data);
        }
        else
        {
            insert(root->left,data);
        }
    }
    return root;
}
int main()
{   int i=0,item;
    struct tree *node;
    while (i<5)
    {   printf("enter element: ");
        scanf("%d",&item);
        insert(node,item);
        i++;
    }
    inorder(node);
}

3.Write a C program depth first search (DFS) using array.

#include<stdio.h> 
int G[10][10],visited[10],n;    
void DFS(int i)
{
    int j;
    printf("\n%d",i);
    visited[i]=1;
    for(j=0;j<n;j++)
    {
       if(!visited[j]&&G[i][j]==1)
       {
            DFS(j);
       }
    }
}

void main()
{
    int i,j;
    printf("Enter number of vertices:");
    scanf("%d",&n);
    printf("\nEnter adjacency matrix of the graph:");
    for(i=0;i<n;i++)
    {
       for(j=0;j<n;j++)
       {
        scanf("%d",&G[i][j]);   
       }
    }        
    for(i=0;i<n;i++)
    {    
        visited[i]=0;
    }
    DFS(0);
}



4.Write a C program breath first search (BFS) using array.

#include<stdio.h>
int a[20][20],q[20],visited[20],n,i,j,f=0,r=-1;
void bfs(int v) 
{
    	for (i=1;i<=n;i++)
    	{  
		if(a[v][i] && !visited[i])
		{
    	   		q[++r]=i;
    		}
    	}
    	if(f<=r)
        {
    		visited[q[f]]=1;
    		bfs(q[f++]);
    	}
}
void main()
{
    	int v;
    	printf("\n Enter the number of vertices:");
    	scanf("%d",&n);
    	for (i=1;i<=n;i++)
	{
    		q[i]=0;
    		visited[i]=0;
    	}
    	printf("\n Enter graph data in matrix form:\n");
    	for (i=1;i<=n;i++)
	{
    	  for (j=1;j<=n;j++)
	  {
    	   	scanf("%d",&a[i][j]);
    	  }
	}
    	printf("\n Enter the starting vertex:");
    	scanf("%d",&v);
    	bfs(v);
    	printf("\n The node which are reachable are:\n");
    	for (i=1;i<=n;i++)
    	{
    		if(visited[i])
		{
    	   		printf("%d\t",i);
		}
	   	else
		{
    	   		printf("\n Bfs is not possible");
		}
    	}
    	
}


5.Write a C program for linear search algorithm.

#include<stdio.h>
int main()
{   int n,a[20],s,k=0;
    printf("Enter the number of elements: ");
    scanf("%d",&n);
    printf("enter the elements:\n");
    for(int i=0;i<n;i++)
    {
	    printf("a[%d]\n",i);
        scanf("%d",&a[i]);
    }
    printf("Enter the element you want to search: ");
    scanf("%d",&s);
    for(int i=0;i<n;i++)
    {
        if (a[i]==s)
        {
            printf("element found in array");
            k=1;
        }
    }
    if (k==0)
    {
        printf("element not found");
    }
}

6.Write a C program for binary search algorithm.

#include<stdio.h>
int main()
{   int n,a[20],s;
    printf("Enter the number of elements: ");
    scanf("%d",&n);
    printf("enter the elements:\n");
    for(int i=0;i<n;i++)
    {
	printf("a[%d]\n",i);
        scanf("%d",&a[i]);
    }
    printf("Enter the element you want to search: ");
    scanf("%d",&s);
    int first=0,last=n-1,mid;
    while(first<=last)
    {   mid=(last+first)/2;
        if (a[mid]==s)
        {
            printf("the given element is in array");
            break;
        }
        else if (s>a[mid])
        {
            first=mid+1;
        }
        else 
        {
            last=mid-1;
        }
    }
    if (first>last)
    {
        printf("the given element is not in array");
    }
} 